/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext {
    versions = [:]
    libraries = [:]
}

versions.gradle_kotlin_dsl = '0.15.0-SNAPSHOT'
versions.commons_io = '2.2'
versions.groovy = '2.4.12'
versions.bouncycastle = '1.58'
versions.maven = '3.0.4'
versions.httpclient = '4.4.1'

libraries.ant = 'org.apache.ant:ant:1.9.9'
libraries.asm =  'org.ow2.asm:asm-debug-all:6.0_BETA'
libraries.cglib = 'cglib:cglib:3.2.5'
libraries.bndlib = 'biz.aQute.bnd:biz.aQute.bndlib:3.4.0'
libraries.commons_cli = 'commons-cli:commons-cli:1.2'
libraries.commons_io = "commons-io:commons-io:${versions.commons_io}"
libraries.commons_lang = 'commons-lang:commons-lang:2.6'
libraries.commons_collections = 'commons-collections:commons-collections:3.2.2'
libraries.commons_compress = 'org.apache.commons:commons-compress:1.14'
libraries.jsch = 'com.jcraft:jsch:0.1.54'

libraries.ivy = 'org.apache.ivy:ivy:2.2.0'

libraries.jcip = "net.jcip:jcip-annotations:1.0"
libraries.inject = 'javax.inject:javax.inject:1'

// Logging
libraries.slf4j_api = 'org.slf4j:slf4j-api:1.7.10'
libraries.jcl_to_slf4j = 'org.slf4j:jcl-over-slf4j:1.7.10'
libraries.jul_to_slf4j = 'org.slf4j:jul-to-slf4j:1.7.10'
libraries.log4j_to_slf4j = 'org.slf4j:log4j-over-slf4j:1.7.10'
libraries.logback_core = 'ch.qos.logback:logback-core:1.0.13'
libraries.logback_classic = 'ch.qos.logback:logback-classic:1.0.13'

// Jetty
libraries.servlet_api = "org.mortbay.jetty:servlet-api:2.5-20081211"
libraries.jetty_util = "org.mortbay.jetty:jetty-util:6.1.26"
libraries.jetty = "org.mortbay.jetty:jetty:6.1.26"
libraries.commons_codec = "commons-codec:commons-codec:1.6"
libraries.jcifs = "org.samba.jcifs:jcifs:1.3.17"
libraries.commons_httpclient = "org.apache.httpcomponents:httpclient:${versions.httpclient}"


libraries += [
    jatl: 'com.googlecode.jatl:jatl:0.2.2',
    dom4j: 'dom4j:dom4j:1.6.1',
    guava: 'com.google.guava:guava-jdk5:17.0',
    kryo: 'com.esotericsoftware.kryo:kryo:2.20',
    jsr305: 'com.google.code.findbugs:jsr305:1.3.9',
    groovy: "org.codehaus.groovy:groovy-all:${versions.groovy}",
    jaxen: 'jaxen:jaxen:1.1',
    jcip: "net.jcip:jcip-annotations:1.0",
    junit: 'junit:junit:4.12',
    xmlunit: 'xmlunit:xmlunit:1.3',
    equalsVerifier: 'nl.jqno.equalsverifier:equalsverifier:2.1.6',
    xbean: 'org.apache.xbean:xbean-reflect:3.4', //required by maven3 classes
    nativePlatform: 'net.rubygrapefruit:native-platform:0.14',
    jansi: 'org.fusesource.jansi:jansi:1.14',
    xerces: "xerces:xercesImpl:2.11.0",
    objenesis: 'org.objenesis:objenesis:1.2',
    jsoup: 'org.jsoup:jsoup:1.6.3',
    xmlApis: 'xml-apis:xml-apis:1.4.01',
    jgit: [
        'org.eclipse.jgit:org.eclipse.jgit:4.5.3.201708160445-r', // 4.6+ requires Java 8
        libraries.commons_httpclient,
        libraries.jsch
    ],
    testng: 'org.testng:testng:6.3.1',
    bsh: 'org.apache-extras.beanshell:bsh:2.0b6'
]

libraries.nekohtml = "net.sourceforge.nekohtml:nekohtml:1.9.14"

libraries.maven3 = "org.apache.maven:maven-core:${versions.maven}"

libraries.spock = [
    'org.spockframework:spock-core:1.0-groovy-2.4',
    libraries.groovy,
    libraries.objenesis,
    libraries.cglib
]
libraries.jmock = [
    'org.jmock:jmock:2.5.1',
    'org.hamcrest:hamcrest-core:1.3',
    'org.hamcrest:hamcrest-library:1.3',
    dependencies.create('org.jmock:jmock-junit4:2.5.1') { exclude group: 'junit', module: 'junit-dep' }, //junit-dep pulls old definitions of core junit types.
    'org.jmock:jmock-legacy:2.5.1',
    libraries.objenesis,
    libraries.cglib
]

versions.findbugs = "2.0.1"
libraries.findbugs = "com.google.code.findbugs:findbugs:${versions.findbugs}"

libraries.bcel = "com.google.code.findbugs:bcel:${versions.findbugs}"

libraries.gson = "com.google.code.gson:gson:2.7"
libraries.sshd = "org.apache.sshd:sshd-core:1.2.0"

libraries.bouncycastle_provider = "org.bouncycastle:bcprov-jdk15on:${versions.bouncycastle}"
libraries.bouncycastle_pgp = "org.bouncycastle:bcpg-jdk15on:${versions.bouncycastle}"

libraries.joda = 'joda-time:joda-time:2.8.2'

versions.aws = "1.11.6"
versions.jackson = "2.8.9"
libraries.awsS3 = [
        "com.amazonaws:aws-java-sdk-s3:${versions.aws}",
        "com.amazonaws:aws-java-sdk-kms:${versions.aws}",
        "com.amazonaws:aws-java-sdk-core:${versions.aws}",
        "com.fasterxml.jackson.core:jackson-core:${versions.jackson}",
        "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}",
        "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
] + libraries.commons_httpclient + libraries.joda

// keep in sync with ScalaLanguagePlugin code
libraries.zinc = 'com.typesafe.zinc:zinc:0.3.15'

libraries.gcs = [
        dependencies.create('com.google.apis:google-api-services-storage:v1-rev78-1.22.0') {
            exclude group: 'commons-logging', module: 'commons-logging'
        },
        "com.fasterxml.jackson.core:jackson-core:${versions.jackson}",
        "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}",
        "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
] + libraries.commons_httpclient + libraries.joda

// for XCode IDE integration support
libraries.plist = 'com.googlecode.plist:dd-plist:1.20'

allprojects { currentProject ->
    dependencies {
        components {
            withModule('org.apache.ivy:ivy') {
                withVariant('default') {
                    withDependencies {
                        add('com.jcraft:jsch:0.1.54') //is declared, but optional
                    }
                }
            }
            withModule('org.apache.maven:maven-core') {
                withVariant('default') {
                    withDependencies {
                        it.removeAll { it.group == 'org.sonatype.sisu' }
                        add("org.apache.maven:maven-compat:${versions.maven}")
                        add('org.apache.maven.wagon:wagon-file:2.4')
                        add('org.apache.maven.wagon:wagon-http:2.4')
                        add('org.apache.maven.wagon:wagon-provider-api:2.4')
                        add('org.apache.maven.wagon:wagon-http-shared4:2.4')
                        add('org.codehaus.plexus:plexus-container-default:1.5.5')
                        add('org.sonatype.aether:aether-connector-wagon:1.13.1')
                        add('org.sonatype.plexus:plexus-cipher:1.7')
                    }
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
            }
            withModule('org.apache.maven.wagon:wagon-provider-api') {
                withVariant('default') {
                    withDependencies { it.findAll { it.name == 'plexus-utils' }.each { changeVersionInMetadata it, '2.1' }}
                }
                withVariant('runtime') {
                    withDependencies { it.findAll { it.name == 'plexus-utils' }.each { changeVersionInMetadata it, '2.1' }}
                }
            }
            withModule('org.apache.xbean:xbean-reflect') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'commons-logging' || it.group == 'log4j' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'commons-logging' || it.group == 'log4j' }}
                }
            }
            withModule('org.codehaus.plexus:plexus-container-default') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'com.google.collections' || it.group == 'junit' || it.group == 'org.apache.xbean' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'com.google.collections' || it.group == 'junit' || it.group == 'org.apache.xbean' }}
                }
            }
            withModule('org.sonatype.aether:aether-connector-wagon') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
            }
            withModule('org.apache.maven:maven-compat') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
            }
            withModule('org.apache.maven:maven-plugin-api') {
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.sonatype.sisu' }}
                }
            }
            withModule('org.apache.maven.wagon:wagon-http') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'org.apache.httpcomponents' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.apache.httpcomponents' }}
                }
            }
            withModule('org.apache.maven.wagon:wagon-http-shared4') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'org.jsoup' || it.group == 'commons-logging' || it.group == 'org.apache.httpcomponents' }}
                }
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'org.jsoup' || it.group == 'commons-logging' || it.group == 'org.apache.httpcomponents' }}
                }
            }
            withModule('net.sourceforge.nekohtml:nekohtml') {
                withVariant('default') {
                    withDependencies {
                        it.findAll { it.group == 'xerces' }.each {
                            changeVersionInMetadata it, '2.11.0'
                        }
                    }
                }
            }
            withModule('org.eclipse.jgit:org.eclipse.jgit') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group == 'com.googlecode.javaewah' }}
                }
            }
            withModule('com.amazonaws:aws-java-sdk-core') {
                withVariant('default') {
                    withDependencies {
                        it.removeAll { it.name == 'jackson-dataformat-cbor' || it.group == 'commons-logging' }
                        it.findAll { it.name == 'httpclient' }.each { changeVersionInMetadata it, versions.httpclient }
                    }
                }
                withVariant('runtime') {
                    withDependencies {
                        it.removeAll { it.name == 'jackson-dataformat-cbor' || it.group == 'commons-logging' }
                        it.findAll { it.name == 'httpclient' }.each { changeVersionInMetadata it, versions.httpclient }
                    }
                }
            }
            withModule('dom4j:dom4j') {
                withVariant('runtime') {
                    withDependencies { it.removeAll { it.group == 'xml-apis' }}
                }
            }
            withModule('com.google.code.findbugs:findbugs') {
                withVariant('default') {
                    withDependencies { it.removeAll { it.group != 'dom4j' }}
                }
            }
            withModule('org.apache.sshd:sshd-core') {
                withVariant('default') {
                    withDependencies {
                        it.findAll { it.group == 'org.slf4j' }.each {
                            changeVersionInMetadata it, '1.7.10'
                        }
                        add('org.apache.mina:mina-core:2.0.10') //is declared, but optional
                    }
                }
            }
            withModule('org.apache.mina:mina-core') {
                withVariant('default') {
                    withDependencies {
                        it.findAll { it.group == 'org.slf4j' }.each {
                            changeVersionInMetadata it, '1.7.10'
                        }
                    }
                }
                withVariant('runtime') {
                    withDependencies {
                        it.findAll { it.group == 'org.slf4j' }.each {
                            changeVersionInMetadata it, '1.7.10'
                        }
                    }
                }
            }
            withModule('org.spockframework:spock-core') {
                withVariant('default') {
                    withDependencies {
                        it.findAll { it.group == 'org.objenesis' }.each {
                            changeVersionInMetadata it, '1.2'
                        }
                    }
                }
            }
            withModule('org.testng:testng') {
                withVariant('default') {
                    withDependencies {
                        it.removeAll { it.name == 'bsh' }
                        add(libraries.bsh)
                    }
                }
            }
            withModule('jaxen:jaxen') {
                withVariant('default') {
                    withDependencies { it.removeAll { true } }
                }
            }
            if (currentProject.name != 'internalAndroidPerformanceTesting') {
                withModule('org.apache.httpcomponents:httpclient') {
                    withVariant('default') {
                        withDependencies {
                            it.removeAll { it.group == 'commons-logging' }
                            add(libraries.jcl_to_slf4j)
                            it.findAll { it.group == 'commons-codec' }.each { changeVersionInMetadata it, '1.6' }
                            it.findAll { it.name == 'httpcore' }.each { changeVersionInMetadata it, '4.4.4' }
                            add(libraries.jcifs)
                        }
                    }
                    withVariant('runtime') {
                        withDependencies {
                            it.removeAll { it.group == 'commons-logging' }
                            it.findAll { it.group == 'commons-codec' }.each { changeVersionInMetadata it, '1.6' }
                            it.findAll { it.name == 'httpcore' }.each { changeVersionInMetadata it, '4.4.4' }
                        }
                    }
                }
            }
        }
    }
}

def changeVersionInMetadata(DependencyMetadata dependencyMetadata, String version) {
    if (dependencyMetadata.hasProperty('version')) {
        dependencyMetadata.version = version
    } else {
        dependencyMetadata.version { prefer version }
    }
}

allprojects {
    configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'org.ow2.asm') {
                details.useTarget(libraries.asm)
            } else if (details.requested.group == 'org.codehaus.groovy') {
                details.useTarget(libraries.groovy)
            } else if (details.requested.group == 'cglib') {
                details.useTarget(libraries.cglib)
            } else if (details.requested.group == 'org.apache.ivy') {
                details.useTarget(libraries.ivy)
            } else if (details.requested.group == 'org.testng') {
                details.useTarget(libraries.testng)
            }
        }
    }
}
